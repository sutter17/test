import java.util.LinkedList;
import java.util.List;
import java.lang.Object;

public interface IWordOnBoardFinder
{
	List<Integer[]> myList = new LinkedList<Integer[]>();
	BoggleBoard board = null;
    /**
     * Return a list of cells on the given board such that
     * the i-th element of the list correponds to the
     * i-th character of the string as found on the board.
     * Returns an empty list if the word cannot be found on the board.
     * @param board is searched for the given word
     * @param word is being searched for on the board
     * @return list of cells on the supplied board that
     * correspond to the word, an empty list should be returned if the word cannot be
     * found on the board
     */
	
	private boolean wordCheck(int row, int col, String word){
		Integer [] position = {row, col};
		if(myList.contains(position)){
			return false;
		}
		if (myList.size()== word.length()){
			return true;
		}else {
			for(int i = row - 1; i <= row + 1; i++) {
				for(int j = col - 1; j <= col + 1; j++) {
					if(word.substring(1,2)==board.getFace(i,j)){
						myList.add(position);
						return wordCheck(i,j,word.substring(1));
						
					}
					if(board.getFace(i, j).toLowerCase()=="qu" && word.substring(1, 3)=="qu") {
						myList.add(position);
						return wordCheck(i,j,word.substring(2));
					}
				}
			}
		}return false;
	}
	
			
  
    public List<BoardCell> cellsForWord(BoggleBoard board, String word);
    
}
