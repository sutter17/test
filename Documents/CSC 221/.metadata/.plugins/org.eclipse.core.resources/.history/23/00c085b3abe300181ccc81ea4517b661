import java.io.PrintStream;
import java.util.PriorityQueue;
import java.util.Scanner;

public class HuffmanTree {
	HuffNode root;
	private static final int CHAR_MAX = 256;
    private static final int EOF = -1;
	public HuffmanTree(int[] count) {
		PriorityQueue<HuffNode> forest = new PriorityQueue<HuffNode>();
		for(int i = 0; i < count.length; i++) {
			if (count[i] > 0) {
				HuffNode myNode = new HuffNode(i,count[i]);
				forest.add(myNode); 
			}
		}
		root = collect(forest);
		
	}
	
	private HuffNode collect(PriorityQueue<HuffNode> forest){
		while(forest.size()>1) {
			forest.add(new HuffNode(forest.remove() , forest.remove()));
		}
		forest.add(new HuffNode(CHAR_MAX,1));
		return forest.remove();
	}
	public void write (PrintStream output) {
		write(output,root);
		String n;
	}
	public void write (PrintStream output, HuffNode root) {
		if(root == null) {
			return;
		}
		if(root.right == null && root.left == null) {
			output.println(root.value);
			output.println(root.code);
			return;
		}
		write(output, root.left);
		write(output, root.right);
	}
	private void add(HuffNode node, HuffNode root,String code) {
		if(code.length() == 1) {
			if(code == "1") {
				root.right = node;
			}else {
				root.left = node;
			}
		}else {
			if(code.charAt(0)=='1') {
				add(node,root.right,code.substring(1));
			}else {
				add(node,root.left,code.substring(1));
			}
		}
	}
	public HuffmanTree(Scanner output) {
		int n = Integer.parseInt(output.next());
		while (n != EOF) {
			String code = output.next();
			add(new HuffNode(n,code),root,code);
			n = Integer.parseInt(output.next());
		}
	}
	void decode(BitInputStream input, PrintStream output, int eof) {
		HuffNode current = root;
		int code = input.readBit();
		while(code != eof) {
			if(current.value == -1) {
				if (code == 1) {
					current = root.right;
				}else {
					current= root.left;
				}
			}else {
				output.append(current.value);
				current = root;
			}
			code = input.readBit();
		}
		
		
	}
}
